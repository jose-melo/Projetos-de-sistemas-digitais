library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.math_real.all;


entity Formex is
	port(
		jogar     	: in  std_logic;
		resposta  	: in  std_logic;
		reset	  		: in  std_logic;
		clock 	  	: in  std_logic;
		pseudoclock	: in  std_logic;
		sel_mux     : in  std_logic_vector(1 downto 0);
		ligado	  	: out std_logic;
		pulso 	  	: out std_logic;
		estimulo  	: out std_logic;
		erro		  	: out std_logic;
		pronto		: out std_logic;
		tempo 	 	: out std_logic_vector(15 downto 0);
		db_estado_7 : out std_logic_vector(6 downto 0);
		saida7seg   : out std_logic_vector(27 downto 0);
		leds        : out std_logic_vector(9 downto 0);
		dis4        : out std_logic_vector(6 downto 0)
	);
end entity;

architecture Formex_arch of Formex is

	component controladorFinal is
		port(
			jogar     : in std_logic;
			resposta  : in std_logic;
			reset	  : in std_logic;
			clock 	  : in std_logic;
			rand			: in std_logic_vector(1 downto 0);
			sel_mux   : in std_logic_vector(1 downto 0);
			error      : in std_logic;
			pronto			: out std_logic;
			db_estado : out std_logic_vector(3 downto 0);
			jogarJOGO     : out std_logic;
			respostaJOGO  : out std_logic;
			resetJOGO	  : out std_logic
		);
	end component;
	
	component JogoReacao_v1 is
		port(
			jogar     : in std_logic;
			resposta  : in std_logic;
			reset	  : in std_logic;
			clock 	  : in std_logic;
			sel_mux     : in std_logic_vector(1 downto 0);
			ligado	  : out std_logic;
			pulso 	  : out std_logic;
			estimulo  : out std_logic;
			erro	  : out std_logic;
			pronto	  : out std_logic;
			tempo 	  : out std_logic_vector(15 downto 0);
			db_PInter, db_PMed : out std_logic;
			db_estado_7 : out std_logic_vector(6 downto 0);
			saida7seg   : out std_logic_vector(27 downto 0);
			leds        : out std_logic_vector(9 downto 0);
			dis4        : out std_logic_vector(6 downto 0)
		);
	end component;
	
	component hexa7seg is
		 port (
			  hexa : in std_logic_vector(3 downto 0);
			  sseg : out std_logic_vector(6 downto 0)
		 );
	end component;
	
    component contador_modm is
        generic (
            constant M: integer := 50 -- valor default do modulo do contador
        );
        port (
            clock, zera, conta: in std_logic;
            Q: out std_logic_vector (natural(ceil(log2(real(M))))-1 downto 0);
            fim: out std_logic
        );
    end component;
	 
	 component RNG is
		 port (
			  pseudoclock : in  std_logic;
			  pseudoout   : out std_logic_vector(1 downto 0)
		 );
	end component;


	signal db_estado_final : std_logic_vector (3 downto 0);
	signal jogarJOGO, respostaJOGO, resetJOGO : std_logic;
	signal tempo_sig : std_logic_vector(15 downto 0);
	signal erro_sig : std_logic;
	signal randContador, jogadasFeitas : std_logic_vector(1 downto 0);
	signal fimDaJogada : std_logic;

begin

	FINAL: controladorFinal port map (jogar, resposta, reset, clock, randContador, sel_mux, erro_sig, fimDaJogada, db_estado_final, jogarJOGO, respostaJOGO, resetJOGO);

	JOGO_REAC: JogoReacao_v1 port map (jogarJOGO, respostaJOGO, resetJOGO, clock, sel_mux, ligado, pulso, estimulo, erro_sig, pronto, tempo_sig, open, open, open, saida7seg, leds, open);
	
	DB_ESTADO_7SEG: hexa7seg port map (db_estado_final, dis4);
	tempo <= tempo_sig;
	erro <= erro_sig;
	
	--geração de um número aleatório
	RANDOM: RNG port map (pseudoclock, randContador);
	RANDOM_DISP: hexa7seg port map ("00"&randContador, db_estado_7);
	
	--contador de estados
	STATE_COUNT: contador_modm
		generic map (3)
		port map (clock, reset, fimDaJogada, jogadasFeitas, open);
end architecture;
