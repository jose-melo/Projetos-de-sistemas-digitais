// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/15/2020 09:35:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          contador_163
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module contador_163_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clr;
reg [3:0] D;
reg enp;
reg ent;
reg ld;
// wires                                               
wire [3:0] Q;
wire rco;

// assign statements (if any)                          
contador_163 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.clr(clr),
	.D(D),
	.enp(enp),
	.ent(ent),
	.ld(ld),
	.Q(Q),
	.rco(rco)
);
initial 
begin 
#620000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	clock = #5000 1'b0;
	# 5000;
	repeat(60)
	begin
		clock = 1'b1;
		clock = #5000 1'b0;
		# 5000;
	end
	clock = 1'b1;
	clock = #5000 1'b0;
end 

// clr
initial
begin
	clr = 1'b1;
	clr = #60000 1'b0;
	clr = #30000 1'b1;
	clr = #330000 1'b0;
	clr = #20000 1'b1;
end 

// ld
initial
begin
	ld = 1'b1;
	ld = #180000 1'b0;
	ld = #20000 1'b1;
	ld = #220000 1'b0;
	ld = #40000 1'b1;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #170000 1'b1;
	D[3] = #40000 1'b0;
	D[3] = #230000 1'b1;
	D[3] = #20000 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
	D[1] = #170000 1'b1;
	D[1] = #40000 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
	D[0] = #170000 1'b1;
	D[0] = #40000 1'b0;
	D[0] = #230000 1'b1;
	D[0] = #20000 1'b0;
end 

// enp
initial
begin
	enp = 1'b0;
	enp = #70000 1'b1;
	enp = #90000 1'b0;
	enp = #60000 1'b1;
	enp = #80000 1'b0;
	enp = #40000 1'b1;
	enp = #240000 1'b0;
end 

// ent
initial
begin
	ent = 1'b0;
	ent = #70000 1'b1;
	ent = #90000 1'b0;
	ent = #60000 1'b1;
	ent = #120000 1'b0;
	ent = #40000 1'b1;
	ent = #200000 1'b0;
end 
endmodule

