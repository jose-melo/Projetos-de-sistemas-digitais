// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/09/2020 20:43:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Contador74163
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Contador74163_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg clock;
reg clr;
reg d;
reg enp;
reg ent;
reg ld;
// wires                                               
wire qa;
wire qb;
wire qc;
wire qd;
wire rco;

// assign statements (if any)                          
Contador74163 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clock(clock),
	.clr(clr),
	.d(d),
	.enp(enp),
	.ent(ent),
	.ld(ld),
	.qa(qa),
	.qb(qb),
	.qc(qc),
	.qd(qd),
	.rco(rco)
);
initial 
begin 
#2800000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	clock = #20000 1'b0;
	# 20000;
	repeat(68)
	begin
		clock = 1'b1;
		clock = #20000 1'b0;
		# 20000;
	end
	clock = 1'b1;
	clock = #20000 1'b0;
end 

// clr
initial
begin
	clr = 1'b1;
	clr = #100000 1'b0;
	clr = #80000 1'b1;
	clr = #700000 1'b0;
	clr = #40000 1'b1;
	clr = #300000 1'b0;
	clr = #60000 1'b1;
end 

// ld
initial
begin
	ld = 1'b1;
	ld = #420000 1'b0;
	ld = #40000 1'b1;
	ld = #420000 1'b0;
	ld = #80000 1'b1;
	ld = #260000 1'b0;
	ld = #160000 1'b1;
	ld = #260000 1'b0;
	ld = #20000 1'b1;
	ld = #60000 1'b0;
	ld = #40000 1'b1;
	ld = #220000 1'b0;
	ld = #80000 1'b1;
end 

// d
initial
begin
	d = 1'b0;
	d = #400000 1'b1;
	d = #80000 1'b0;
	d = #440000 1'b1;
	d = #40000 1'b0;
	d = #360000 1'b1;
	d = #80000 1'b0;
	d = #240000 1'b1;
	d = #20000 1'b0;
	d = #320000 1'b1;
	d = #80000 1'b0;
end 

// c
initial
begin
	c = 1'b0;
	c = #1380000 1'b1;
	c = #20000 1'b0;
	c = #320000 1'b1;
	c = #40000 1'b0;
	c = #220000 1'b1;
	c = #80000 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #400000 1'b1;
	b = #80000 1'b0;
	b = #800000 1'b1;
	b = #120000 1'b0;
	b = #320000 1'b1;
	b = #40000 1'b0;
end 

// a
initial
begin
	a = 1'b0;
	a = #400000 1'b1;
	a = #80000 1'b0;
	a = #440000 1'b1;
	a = #40000 1'b0;
	a = #420000 1'b1;
	a = #20000 1'b0;
	a = #580000 1'b1;
	a = #80000 1'b0;
end 

// enp
initial
begin
	enp = 1'b0;
	enp = #200000 1'b1;
	enp = #180000 1'b0;
	enp = #120000 1'b1;
	enp = #140000 1'b0;
	enp = #80000 1'b1;
	enp = #580000 1'b0;
	enp = #80000 1'b1;
	enp = #1060000 1'b0;
end 

// ent
initial
begin
	ent = 1'b0;
	ent = #200000 1'b1;
	ent = #180000 1'b0;
	ent = #120000 1'b1;
	ent = #220000 1'b0;
	ent = #80000 1'b1;
	ent = #500000 1'b0;
	ent = #80000 1'b1;
	ent = #1060000 1'b0;
end 
endmodule

